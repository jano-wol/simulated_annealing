cmake_minimum_required(VERSION 3.15)
project(simulated_annealing)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib)
if (CMAKE_CXX_COMPILER STREQUAL "clang++")
add_compile_options(-stdlib=libc++)
add_link_options(-stdlib=libc++)
endif()
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    add_compile_options(-Wall -Wextra -pedantic -Wcast-qual -Wshadow -mavx2)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options(/WX /permissive- /arch:AVX2)
endif()
string(TOLOWER "${CMAKE_BUILD_TYPE}" build_type_lower)
if (NOT build_type_lower STREQUAL "release")
    if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
        add_compile_options(-g)
    endif()
endif()
if (NOT build_type_lower STREQUAL "debug")
    include(CheckIPOSupported)
    check_ipo_supported(RESULT lto_supported OUTPUT lto_output)
    if (lto_supported)
        set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
        if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
            set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto=auto")
        elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
            add_link_options(/LTCG)
        endif()
    else()
        message(WARNING "LTO/IPO not supported: ${lto_output}")
    endif()
endif()

enable_testing()
add_subdirectory(source)
